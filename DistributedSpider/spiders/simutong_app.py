# -*- coding:utf-8 -*-import scrapyfrom user_agent import generate_user_agentimport random, requests, json, urllib.parse,sys, osfrom jsonpath import jsonpathimport better_exceptionssys.path.append(os.path.dirname(os.path.abspath(__file__)))sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))sys.path.append(os.path.dirname(os.path.dirname(    os.path.dirname(os.path.abspath(__file__)))))sys.path.append(os.path.dirname(os.path.dirname(    os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))from SpiderHelp import SpiderHelp# 暂时未发现私募通app端反爬策略conn_flag = Falseclass SimutongSpider(scrapy.Spider, SpiderHelp):    name = 'simutong_app'    start_urls = ['https://app.pedata.cn']    # domains = []    # def __init__(self):    #     self.login_in()    #     super(SimutongSpider,self).__init__()            def start_requests(self):        for url in self.start_urls:            yield scrapy.Request(url,                headers=self.headers,)    @property    def headers(self):        return {'User-Agent': 'AppDelegate/3.10.10 (iPhone; iOS 10.3; Scale/2.00)',#generate_user_agent(device_type='smartphone'),                'Content-Type': 'application/x-www-form-urlencoded',                # 'Connection': 'keep-alive',                'Accept-Language': 'zh-Hans-CN;q=1,et-EE;q=0.9,en-CN;q=0.8',                'Accept-Encoding': 'gzip, default',                'Accept': '*/*',                'Host': 'app.pedata.cn',                'Referer': None                }    def project_data(self, start=1):        # print({'limit':'10','start': str((start-1) * 10)})        return {'limit':'100','start': str((start-1) * 10)}    def parse(self, response):        url = 'https://app.pedata.cn/PEDATA_APP_BACK/user/login?platform=ios&app_name=smt_app&platversion=4.0.9&device_info=iPhone10.3&device_version=iPhone6s&ios_idfa=96A97A1F-DADA-4585-B76A-E680C76C1B16'        post_data = {'password': '8927968', 'username': '17600811823'}        headers={'User-Agent': 'AppDelegate/3.10.10 (iPhone; iOS 10.3; Scale/2.00)','Referer':None}        yield scrapy.Request(url=url,            method='POST',            body=urllib.parse.urlencode(post_data),            headers=self.headers,            priority=1000,            dont_filter=True,            meta={'cookiejar': 1},            callback=self.jump)    def jump(self, response):        print(response.text)        project_url = 'https://app.pedata.cn/PEDATA_APP_BACK/project/list?platform=ios&app_name=smt_app&platversion=4.0.9&device_info=iPhone10.3&device_version=iPhone6s&ios_idfa=96A97A1F-DADA-4585-B76A-E680C76C1B16'        yield scrapy.Request(project_url,            method='POST',            body=urllib.parse.urlencode(self.project_data()),            headers=self.headers,            # cookies=self.cookies,            meta={'cookiejar': response.meta['cookiejar']},            callback=self.project_list_page)    def project_list_page(self, response):        # print(response.text)        page = response.meta.get('page',response.meta['cookiejar'])        JS = json.loads(response.text)        totalpage = response.meta.get('totalpage') or int(JS.get('total'))        if page <= totalpage:            data = self.project_data(page)            yield  scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/project/list?platform=ios&app_name=smt_app&platversion=4.0.9&device_info=iPhone10.3&device_version=iPhone6s&ios_idfa=96A97A1F-DADA-4585-B76A-E680C76C1B16',                            body=urllib.parse.urlencode(data),                            method='POST',                            headers=self.headers,                            dont_filter=True,                            meta={'cookiejar': response.meta['cookiejar'],'page': page+1,'totalpage': totalpage},                            callback=self.project_list_page)        project_ids = jsonpath(JS,'$.result[*].project')        if project_ids:            for project in project_ids:                url = 'https://app.pedata.cn/PEDATA_APP_BACK/project/detail?projectId={project}'.format(project=project)                yield scrapy.Request(url,                    headers=self.headers,                    meta={'cookiejar': response.meta['cookiejar']},                    callback=self.project_detail)        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppProjectDedail',                        'keys': ['companyName'],                        'check': 'companyName',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': 'project',                            'En': 'project',                            'v': 'project',                            't': 'json'                        },                         {                            'n': '清科ID',                            'En': 'qkid',                            'v': 'qkid',                            't': 'json'                        },                        {                            'n': 'logo',                            'En': 'logo',                            'v':                            'logo',                            't': 'json'                        },                        {                            'n': 'title',                            'En': 'title',                            'v':                            'title',                            't': 'json'                        },                        {                            'n': 'companyName',                            'En': 'companyName',                            'v':                            'companyName',                            't': 'json'                        },{                            'n': 'established',                            'En': 'established',                            'v':                            'established',                            't': 'json'                        },{                            'n': 'round',                            'En': 'round',                            'v':                            'round',                            't': 'json'                        },{                            'n': 'desc',                            'En': 'descinfo',                            'v':                            'desc',                            't': 'json'                        },{                            'n': 'epNeedInfo',                            'En': 'epNeedInfo',                            'v':                            'epNeedInfo',                            't': 'json'                        },                ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def project_detail(self, response):        # 项目页面        JS = json.loads(response.text)        qkids = jsonpath(JS,'$..qkid')        print(qkids)        if qkids:            for qkid in qkids:                if not qkid:                    continue                yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/surveyInfo?qkid={qkid}'.format(qkid=qkid),                    headers=self.headers,                    meta={'cookiejar': response.meta['cookiejar']},                    callback=self.surveyinfo)                yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/history?qkid={qkid}'.format(qkid=qkid),                    headers=self.headers,                    meta={'cookiejar': response.meta['cookiejar']},                    callback=self.history)        '''                        {'success': True, 'msg': '数据获取成功', 'result': {'project': 'b9d88761-2698-11e8-8243-000001f30e9f', 'qkid': '', 'logo                ': 'https://pic.pedata.cn//pedata-app/logo/project/201803/0bbd3d7f2a2e40269215374d2a55dc94.png', 'title': '狐聊', 'compa                nyName': '杭州狐聊网络科技有限公司', 'established': '2017.9', 'round': '尚未获投', 'companyStatus': '运营中', 'slogan':                '直播平台', 'introduce': '狐聊是一家直播平台，提供美女主播等，隶属于杭州狐聊网络科技有限公司。', 'epNeedInfo': '', 'epNe                edId': '', 'industry': '文化娱乐,其他文娱服务', 'website': 'www.huliao.tv', 'area': '', 'tags': ['主播', '直播', '直播平                台', '美女主播']}, 'shareDetailUrl': 'https://app.pedata.cn/PEDATA_APP_BACK/share/project_b9d88761-2698-11e8-8243-000001                f30e9f_764f969215fc4766a48c63aaef715a3b_44AF488952AB7E5B2BB6FB263B397089'}        '''        _configs = [{                'list': {                        'n': '',                        'v': '',                        't': 'json',                        'db': 'Simutong.AppProjectInfo2',                        'keys': ['companyName'],                        'check': 'companyName',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': 'project',                            'En': 'project',                            'v': 'result/project',                            't': 'json'                        },                         {                            'n': '清科ID',                            'En': 'qkid',                            'v': 'result/qkid',                            't': 'json'                        },                        {                            'n': 'title',                            'En': 'title',                            'v':                            'result/title',                            't': 'json'                        },                        {                            'n': 'companyName',                            'En': 'companyName',                            'v':                            'result/companyName',                            't': 'json'                        },                        {                            'n': 'established',                            'En': 'established',                            'v':                            'result/established',                            't': 'json'                        },{                            'n': 'round',                            'En': 'round',                            'v':                            'result/round',                            't': 'json'                        },{                            'n': 'companyStatus',                            'En': 'companyStatus',                            'v':                            'result/companyStatus',                            't': 'json'                        },{                            'n': 'slogan',                            'En': 'slogan',                            'v':                            'result/slogan',                            't': 'json'                        },{                            'n': 'introduce',                            'En': 'introduce',                            'v':                            'result/introduce',                            't': 'json'                        },{                            'n': 'epNeedInfo',                            'En': 'epNeedInfo',                            'v':                            'result/epNeedInfo',                            't': 'json'                        },{                            'n': 'industry',                            'En': 'industry',                            'v':                            'result/industry',                            't': 'json'                        },{                            'n': 'website',                            'En': 'website',                            'v':                            'result/website',                            't': 'json'                        },{                            'n': 'area',                            'En': 'area',                            'v':                            'result/area',                            't': 'json'                        },{                            'n': 'tags',                            'En': 'tags',                            'v':                            'result/tags',                            't': 'json_join,'                        },                ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)            def history(self, response):        #投资页面        JS = json.loads(response.text)        qkids = jsonpath(JS,'$..qkid')        if qkids:            for qkid in qkids:                if not qkid:                    continue                yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/surveyInfo?qkid={qkid}'.format(qkid=qkid),                    headers=self.headers,                    meta={'cookiejar': response.meta['cookiejar']},                    callback=self.surveyinfo)    def baseInfo(self, response):        # print(response.text)        '''        "result": {                "qkid": "2801201259",                "namecn": "北京亦庄国际产业投资管理有限公司",  #企业名称                "snamecn": "亦庄产投",  #企业简称                "establish": "2013-02-20",  # 成立时间                "industry": "",  #行业分类                "eptype": "",  # 企业类型                "capitaltype": "本土",  #资本类型                "regPlace": "北京市",  # 注册地区                "headPlace": "北京市",  # 总部地区                "lptype": "",  # 合伙人类型                "lpCapital": "", # 合伙人资本                "lpCurrency": "", # 合伙人币种                "lpRaiseInfo": "", # 合伙人募集信息                "spType": "", # spType                "spBusinessType": "", spBusinessType                "spCaseInfo": "", spCaseInfo                "hnamecn": "亦庄产业投资", # 企业曾用名                "isnationnal": "否",  # 国有背景                "introductionCn": "北京亦庄国际产业投资管理有限公司成立于2013年，注册资本为1,000.00万元，是北京亦庄国际投资发展有限公司旗下子机构，主要负责管理北京亦庄国际新兴产业投资中心（有限合伙）。",                # 企业简介                "vcpeType": "PE",  # 机构属性                "vcpeForm": "公司制",  #组织形式                "parentNameCn": "",  # 上级机构                "isSecuritiesBlocker": "否",  # 是否券商直投                "vcpeCapital": "1.00亿",  # 管理资本量                "vcpeCurrency": "人民币",   管理资本量 币种                "fundCount": "4支",  # 管理基金数量                "intendArea": [],                "intendIndustry": [],                "intendStage": [],                "standardCn": "",                "fundType": "",                "manageName": "",                "raiseStatus": "",                "fundGoalCurrency": "",                "fundGoalSize": "",                "raiseBegin": "",                "fundRaiseMoney": "",                "fundForm": "",                "isAmac": "是",                "hasGovFund": "0",                "applyId": "",                "fundLevel": "",                "fundClass": "",                "fundDeadline": "",                "financeSize": "",                "financeSizeCurrency": "",                "declareDeadline": "",                "gpSize": "",                "gpSizeCurrency": "",                "policyId": "",                "policyName": "",                "policyUrl": ""            }        '''        _configs = [{                'list': {                        'n': '',                        'v': '',                        't': 'json',                        'db': 'Simutong.AppBaseInfo',                        'keys': ['ComName'],                        'check': 'ComName',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'result/namecn',                            't': 'json'                        },                         {                            'n': '清科ID',                            'En': 'QKID',                            'v': 'result/qkid',                            't': 'json'                        },                        {                            'n': '公司简称',                            'En': 'ShortName',                            'v':                            'result/snamecn',                            't': 'json'                        },                        {                            'n': '成立时间',                            'En': 'SetupTime',                            'v':                            'result/establish',                            't': 'json'                        },                        {                            'n': '行业分类',                            'En': 'Industry',                            'v':                            'result/industry',                            't': 'json'                        },{                            'n': '企业类型',                            'En': 'eptype',                            'v':                            'result/eptype',                            't': 'json'                        },{                            'n': '资本类型',                            'En': 'capitaltype',                            'v':                            'result/capitaltype',                            't': 'json'                        },{                            'n': '注册地区',                            'En': 'regPlace',                            'v':                            'result/regPlace',                            't': 'json'                        },{                            'n': '总部地区',                            'En': 'headPlace',                            'v':                            'result/headPlace',                            't': 'json'                        },{                            'n': '合伙人类型',                            'En': 'lptype',                            'v':                            'result/lptype',                            't': 'json'                        },{                            'n': '合伙人资本',                            'En': 'lpCapital',                            'v':                            'result/lpCapital',                            't': 'json'                        },{                            'n': '合伙人币种',                            'En': 'lpCurrency',                            'v':                            'result/lpCurrency',                            't': 'json'                        },{                            'n': '合伙人募集信息',                            'En': 'lpRaiseInfo',                            'v':                            'result/lpRaiseInfo',                            't': 'json'                        },{                            'n': 'spType',                            'En': 'spType',                            'v':                            'result/spType',                            't': 'json'                        },{                            'n': 'spBusinessType',                            'En': 'spBusinessType',                            'v':                            'result/spBusinessType',                            't': 'json'                        },{                            'n': 'spCaseInfo',                            'En': 'spCaseInfo',                            'v':                            'result/spCaseInfo',                            't': 'json'                        },{                            'n': '企业曾用名',                            'En': 'hnamecn',                            'v':                            'result/hnamecn',                            't': 'json'                        },{                            'n': '国有背景',                            'En': 'isnationnal',                            'v':                            'result/isnationnal',                            't': 'json'                        },{                            'n': '企业简介',                            'En': 'introductionCn',                            'v':                            'result/introductionCn',                            't': 'json'                        },{                            'n': '机构属性',                            'En': 'vcpeType',                            'v':                            'result/vcpeType',                            't': 'json'                        },{                            'n': '组织形式',                            'En': 'vcpeForm',                            'v':                            'result/vcpeForm',                            't': 'json'                        },{                            'n': '上级机构',                            'En': 'parentNameCn',                            'v':                            'result/parentNameCn',                            't': 'json'                        },{                            'n': '是否券商直投',                            'En': 'isSecuritiesBlocker',                            'v':                            'result/isSecuritiesBlocker',                            't': 'json'                        },{                            'n': '管理资本量',                            'En': 'vcpeCapital',                            'v':                            'result/vcpeCapital',                            't': 'json'                        },{                            'n': '管理资本量 币种',                            'En': 'vcpeCurrency',                            'v':                            'result/vcpeCurrency',                            't': 'json'                        },{                            'n': '管理基金数量',                            'En': 'fundCount',                            'v':                            'result/fundCount',                            't': 'json'                        },                ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)            def contactInfo(self, response):        # print(response.text)        '''        "result": [{            "contactType": "中国", # 联系地区            "place": "北京市", # 所在城市            "establish": "2013-02-20", # 成立日期            "tel": "86-10-8716-2393", # 联系电话            "fax": "", # 传真            "email": "", # 电子邮箱            "personCn": "周蓉", #联系人            "addressCn": "北京市北京经济技术开发区宏达北路10号405室" # 联系地址    }        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppContactInfo',                        'keys': ['ComName'],                        'check': 'Country',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '联系地区',                            'En': 'Country',                            'v': 'contactType',                            't': 'json'                        },                        {                            'n': '所在城市',                            'En': 'City',                            'v':                            'place',                            't': 'json'                        },                        {                            'n': '成立日期',                            'En': 'SetupTime',                            'v':                            'establish',                            't': 'json'                        },                        {                            'n': '联系电话',                            'En': 'Tel',                            'v':                            'tel',                            't': 'json'                        },{                            'n': '传真',                            'En': 'Fax',                            'v':                            'fax',                            't': 'json'                        },{                            'n': '电子邮箱',                            'En': 'Email',                            'v':                            'email',                            't': 'json'                        },{                            'n': '联系人',                            'En': 'Person',                            'v':                            'personCn',                            't': 'json'                        },{                            'n': '联系地址',                            'En': 'Address',                            'v':                            'addressCn',                            't': 'json'                        },                ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def personInfo(self, response):        # print(response.text)        '''        # result[{            personId ID            personNameCn 中文名            personNameEn 英文名            personCareerPositionCn 职务            personCareerPositionEn 职务英文            personPhoto 照片            personDescInfo  个人简介            ]}        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppPersonInfo',                        'keys': ['ComName', 'personNameCn'],                        'check': 'personNameCn',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': 'personId',                            'En': 'personId',                            'v': 'personId',                            't': 'json'                        },                        {                            'n': '中文名',                            'En': 'personNameCn',                            'v':                            'personNameCn',                            't': 'json'                        },                        {                            'n': '英文名',                            'En': 'personNameEn',                            'v':                            'personNameEn',                            't': 'json'                        },                        {                            'n': '职务',                            'En': 'personCareerPositionCn',                            'v':                            'personCareerPositionCn',                            't': 'json'                        },{                            'n': '职务英文',                            'En': 'personCareerPositionEn',                            'v':                            'personCareerPositionEn',                            't': 'json'                        },{                            'n': '照片',                            'En': 'personPhoto',                            'v':                            'personPhoto',                            't': 'json'                        },{                            'n': '个人简介',                            'En': 'personDescInfo',                            'v':                            'personDescInfo',                            't': 'json'                        },                ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def regInfo(self, response):        # print(response.text)        '''"        result": {                "legalPerson": "张建勋",  # 法定代表人                "setupDate": "2013-02-20", #成立时间                "regCapitail": "10000.00万人民币", # 注册资本                "epType": "其他有限责任公司", # 企业类型                "entStatus": "在营（开业）",  # 企业状态                "uscid": "",  #                 "orgcode": "", # 组织机构代码                "regcode": "110302015629243",  # 工商注册号                "opFrom": "2013-02-20",  # 营业期限开始--                "opTo": "2033-02-19",  #营业期限结束--                "checkDate": "",  #                 "industry": "租赁和商务服务业",  # 所属行业                "address": "北京市北京经济技术开发区景园北街2号56幢6层608",  # 企业地址                "scope": "投资管理；投资咨询、企业管理咨询、财务咨询（不得开展审计、验资、查帐、评估、会计咨询、代理记账等需经专项审批的业务，不得出具相应的审计报告、验资报告、查帐报告、评估报告等文字材料）。（企业依法自主选择经营项目，开展经营活动；依法须经批准的项目，经相关部门批准后依批准的内容开展经营活动；不得从事本市产业政策禁止和限制类项目的经营活动。）",                # 经营范围                "regOrg": "开发区分局办公室"  # 注册机构                }        '''        if 'legalPerson' not in response.text:            return        _configs = [{                'list': {                        'n': '',                        'v': '',                        't': 'json',                        'db': 'Simutong.AppRegInfo',                        'keys': ['ComName'],                        'check': 'regcode',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '法定代表人',                            'En': 'legalPerson',                            'v': 'result/legalPerson',                            't': 'json'                        },                        {                            'n': '成立时间',                            'En': 'setupDate',                            'v':                            'result/setupDate',                            't': 'json'                        },                        {                            'n': '注册资本',                            'En': 'regCapitail',                            'v':                            'result/regCapitail',                            't': 'json'                        },                        {                            'n': '企业类型',                            'En': 'epType',                            'v':                            'result/epType',                            't': 'json'                        },{                            'n': '企业状态',                            'En': 'entStatus',                            'v':                            'result/entStatus',                            't': 'json'                        },{                            'n': 'uscid',                            'En': 'uscid',                            'v':                            'result/uscid',                            't': 'json'                        },{                            'n': '组织机构代码',                            'En': 'orgcode',                            'v':                            'result/orgcode',                            't': 'json'                        },{                            'n': '工商注册号',                            'En': 'regcode',                            'v':                            'result/regcode',                            't': 'json'                        },{                            'n': '营业期限开始',                            'En': 'opFrom',                            'v':                            'result/opFrom',                            't': 'json'                        },{                            'n': '营业期限截至',                            'En': 'opTo',                            'v':                            'result/opTo',                            't': 'json'                        },{                            'n': 'checkDate',                            'En': 'checkDate',                            'v':                            'result/checkDate',                            't': 'json'                        },{                            'n': '所属行业',                            'En': 'industry',                            'v':                            'result/industry',                            't': 'json'                        },{                            'n': '企业地址',                            'En': 'address',                            'v':                            'result/address',                            't': 'json'                        },{                            'n': '经营范围',                            'En': 'scope',                            'v':                            'result/scope',                            't': 'json'                        },{                            'n': '注册机构',                            'En': 'regOrg',                            'v':                            'result/regOrg"',                            't': 'json'                        },                ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def changeInfo(self, response):        # print(response.text)        '''        "result": [{                "altDate": "2016-05-03", # 变更日期                "altItem": "法定代表人变更",  # 变更内容                "altBefore": "王晓波", # 变更前                "altAfter": "张建勋" #变更后            }, {                "altDate": "2016-05-03",                "altItem": "负责人变更",                "altBefore": "王晓波，董事长；房媛，董事；刘峰，董事；王晓波，经理；杨文冰，监事；",                "altAfter": "张建勋，董事长；唐雪峰，董事；房媛，董事；唐雪峰，经理；杨文冰，监事；"            }]        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppChangeInfo',                        'keys': ['ComName', 'altDate', 'altItem'],                        'check': 'altDate',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '变更日期',                            'En': 'altDate',                            'v': 'altDate',                            't': 'json'                        },                        {                            'n': '变更内容',                            'En': 'altItem',                            'v':                            'altItem',                            't': 'json'                        },                        {                            'n': '变更前',                            'En': 'altBefore',                            'v':                            'altBefore',                            't': 'json'                        },                        {                            'n': '变更后',                            'En': 'altAfter',                            'v':                            'altAfter',                            't': 'json'                        },                ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def entInvestInfo(self, response):        # print(response.text)        '''        "result": [{                "finEntID": "2811234458",  #                 "entName": "北京亦庄国际新兴产业投资中心（有限合伙）", # 企业名称                "regNo": "110302015765622", # 工商注册号                "regCapi": "1000200.00万人民币", # 注册资本                "subConAmt": "1.00万人民币", # 认缴出资金额                "fundedRatio": "0%", # 出资方式、比例                "conForm": "货币" # 出资形式            },         '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppEntInvestInfo',                        'keys': ['ComName', 'entName'],                        'check': 'entName',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': 'finEntID',                            'En': 'finEntID',                            'v': 'finEntID',                            't': 'json'                        },                        {                            'n': '企业名称',                            'En': 'entName',                            'v':                            'entName',                            't': 'json'                        },                        {                            'n': '工商注册号',                            'En': 'regNo',                            'v':                            'regNo',                            't': 'json'                        },                        {                            'n': '注册资本',                            'En': 'regCapital',                            'v':                            'regCapi',                            't': 'json'                        }, {                            'n': '认缴出资金额',                            'En': 'subConAmt',                            'v':                            'subConAmt',                            't': 'json'                        }, {                            'n': '出资方式、比例',                            'En': 'fundedRatio',                            'v':                            'fundedRatio',                            't': 'json'                        }, {                            'n': '出资形式',                            'En': 'conForm',                            'v':                            'conForm',                            't': 'json'                        },                ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def partnerInfo(self, response):        # print(response.text)        '''        "result": [{                "shId": "2800329348",  #  股东ID                "shName": "北京亦庄国际投资发展有限公司", # 股东名称                "subConAmt": "900.00万人民币", # 认缴出资额                "fundedRatio": "9.00%" # 持股比例            }, {                "shId": "21329928512",                "shName": "北京亦庄移动硅谷有限公司",                "subConAmt": "100.00万人民币",                "fundedRatio": "1.00%"            }]        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppPartnerInfo',                        'keys': ['ComName', 'shName'],                        'check': 'shName',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': 'shId',                            'En': 'shId',                            'v': 'shId',                            't': 'json'                        },                        {                            'n': '股东名称',                            'En': 'shName',                            'v':                            'shName',                            't': 'json'                        },                        {                            'n': '认缴出资额',                            'En': 'subConAmt',                            'v':                            'subConAmt',                            't': 'json'                        },                        {                            'n': '持股比例',                            'En': 'fundedRatio',                            'v':                            'fundedRatio',                            't': 'json'                        },                 ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def equityInfo(self, response):        # print(response.text)        '''        "result": [{                "eventDate": "2018-03-11", #  事件日期                "roundName": "A", # 融资轮次                "eventMoney": "", # 交易金额                "eventMoneyCurrency": "人民币", # 币种                "eventStage": "扩张期",  # 发展阶段                "buyers": [{                    "qkid": "2801169254", # 买方ID                    "name": "高榕资本", # 买方                    "type": "ep" # 类型                }, {                    "qkid": "2805249453",                    "name": "九阳股份",                    "type": "ep"                }]        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppEquityInfo',                        'keys': ['ComName', 'eventDate'],                        'check': 'eventDate',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '交易日期',                            'En': 'eventDate',                            'v': 'eventDate',                            't': 'json'                        },                        {                            'n': '融资轮次',                            'En': 'roundName',                            'v':                            'roundName',                            't': 'json'                        },                        {                            'n': '交易金额',                            'En': 'eventMoney',                            'v':                            'eventMoney',                            't': 'json'                        },                        {                            'n': '币种',                            'En': 'eventMoneyCurrency',                            'v':                            'eventMoneyCurrency',                            't': 'json'                        }, {                            'n': '发展阶段',                            'En': 'eventStage',                            'v':                            'eventStage',                            't': 'json'                        }, {                            'n': '买方',                            'En': 'buyers',                            'v':                            'buyers/name',                            't': 'json_join,'                        },                 ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def entMaInfo(self, response):        # print(response.text)        '''        "result": [{                "eventId": "222383644", # 事件ID                "targetType": "1",  # 收购类型ID                "targetTypeName": "股权", #收购类型                "assetName": "天津英众文化传播有限公司", # 被收购方                "eventMoney": "", # 交易金额                "eventMoneyCurrency": "", # 交易币种                "eventStake": "", # 交易股本                "eventDate": "2015-11", # 交易日期                "epId": "2770627553", # 企业ID                "epName": "英众文化", # 企业名称                "epLogo": "https://pic.pedata.cn/pedata-app/logo/org_basic/6275/F9F39056E43F38496AFAE23CA3EB7510.jpg", # 企业LOGO                "tags": ["文化娱乐", "文化传播"] # 标签            }, {        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppEntMaInfo',                        'keys': ['ComName', 'assetName'],                        'check': 'assetName',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '交易id',                            'En': 'eventId',                            'v': 'eventId',                            't': 'json'                        },                        {                            'n': '收购类型',                            'En': 'targetTypeName',                            'v':                            'targetTypeName',                            't': 'json'                        },                        {                            'n': '被收购方',                            'En': 'assetName',                            'v':                            'assetName',                            't': 'json'                        },                        {                            'n': '交易金额',                            'En': 'eventMoney',                            'v':                            'eventMoney',                            't': 'json'                        }, {                            'n': '交易币种',                            'En': 'eventMoneyCurrency',                            'v':                            'eventMoneyCurrency',                            't': 'json'                        }, {                            'n': '交易股本',                            'En': 'eventStake',                            'v':                            'eventStake',                            't': 'json'                        }, {                            'n': '交易日期',                            'En': 'eventDate',                            'v':                            'eventDate',                            't': 'json'                        }, {                            'n': '企业ID',                            'En': 'epId',                            'v':                            'epId',                            't': 'json'                        }, {                            'n': '企业LOGO',                            'En': 'epLogo',                            'v':                            'epLogo',                            't': 'json'                        }, {                            'n': '企业名称',                            'En': 'epName',                            'v':                            'epName',                            't': 'json'                        }, {                            'n': '标签',                            'En': 'tags',                            'v':                            'tags',                            't': 'json_join,'                        },                 ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def exitProjectInfo(self, response):        # print(response.text)        '''        "result": [{                "exitId": "318238124", # 退出ID                "exitDate": "2018-02-23", #退出日期                "exitMoney": "2.84亿",  # 退出金额                "exitMoneyCurrency": "人民币", # 退出币种                "exitType": "并购", # 退出类型                "exitReturnMultiple": "", #                 "exitReturnRate": "", #                 "epId": "1232327475", # 企业ID                "epName": "三六零", # 企业名称                "sellerName": "烟台民和昊虎投资中心（有限合伙）", # 退出人                "logo": "https://pic.pedata.cn/pedata-app/logo/org_basic/2747/109ABDDC22F1F27045CCAD37D67DBB7F.jpg", # 企业logo                "tags": ["网络服务"] # 标签            }]        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppExitProjectInfo',                        'keys': ['ComName', 'sellerName'],                        'check': 'sellerName',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '退出ID',                            'En': 'exitId',                            'v': 'exitId',                            't': 'json'                        },                        {                            'n': '退出日期',                            'En': 'exitDate',                            'v':                            'exitDate',                            't': 'json'                        },                        {                            'n': '退出金额',                            'En': 'exitMoney',                            'v':                            'exitMoney',                            't': 'json'                        },                        {                            'n': '退出币种',                            'En': 'exitMoneyCurrency',                            'v':                            'exitMoneyCurrency',                            't': 'json'                        }, {                            'n': '退出类型',                            'En': 'exitType',                            'v':                            'exitType',                            't': 'json'                        }, {                            'n': 'exitReturnMultiple',                            'En': 'exitReturnMultiple',                            'v':                            'exitReturnMultiple',                            't': 'json'                        }, {                            'n': 'exitReturnRate',                            'En': 'exitReturnRate',                            'v':                            'exitReturnRate',                            't': 'json'                        }, {                            'n': '企业ID',                            'En': 'epId',                            'v':                            'epId',                            't': 'json'                        }, {                            'n': '企业LOGO',                            'En': 'epLogo',                            'v':                            'epLogo',                            't': 'json'                        }, {                            'n': '企业名称',                            'En': 'epName',                            'v':                            'epName',                            't': 'json'                        }, {                            'n': '标签',                            'En': 'tags',                            'v':                            'tags',                            't': 'json'                        }, {                            'n': '出让方',                            'En': 'sellerName',                            'v':                            'sellerName',                            't': 'json'                        },                 ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def projectInfo(self, response):        # print(response.text)        '''        "result": [{                "eventId": "234924426", # 事件ID                "eventRound": "E", # 投资轮次                "epId": "1232327475", # 企业ID                "epName": "三六零", # 企业名称                "buyerId": "2814664357", # 投资ID                "buyerName": "烟台民和昊虎投资中心（有限合伙）", # 投资人                "epLogo": "https://pic.pedata.cn/pedata-app/logo/org_basic/2747/109ABDDC22F1F27045CCAD37D67DBB7F.jpg", # 企业LOGO                "buyerMoney": "", # 投资金额                "buyerMoneyCurrency": "人民币", # 投资币种                "eventDate": "2017-02-17",  # 投资日期                "tags": ["网络服务"] # 标签             }]        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppProjectInfo',                        'keys': ['ComName', 'buyerName'],                        'check': 'buyerName',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '交易ID',                            'En': 'eventId',                            'v': 'eventId',                            't': 'json'                        },                        {                            'n': '投资轮次',                            'En': 'eventRound',                            'v':                            'eventRound',                            't': 'json'                        },                        {                            'n': '企业ID',                            'En': 'epId',                            'v':                            'epId',                            't': 'json'                        },                        {                            'n': '企业名称',                            'En': 'epName',                            'v':                            'epName',                            't': 'json'                        }, {                            'n': '买方id',                            'En': 'buyerId',                            'v':                            'buyerId',                            't': 'json'                        }, {                            'n': '买方',                            'En': 'buyerName',                            'v':                            'buyerName',                            't': 'json'                        }, {                            'n': '企业LOGO',                            'En': 'epLogo',                            'v':                            'epLogo',                            't': 'json'                        }, {                            'n': '投资金额',                            'En': 'buyerMoney',                            'v':                            'buyerMoney',                            't': 'json'                        }, {                            'n': '投资币种',                            'En': 'buyerMoneyCurrency',                            'v':                            'buyerMoneyCurrency',                            't': 'json'                        }, {                            'n': '交易日期',                            'En': 'eventDate',                            'v':                            'eventDate',                            't': 'json'                        }, {                            'n': '标签',                            'En': 'tags',                            'v':                            'tags',                            't': 'json_join,'                        },                 ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def ipoInfo(self, response):        # print(response.text)        '''        "result": [{                "ipoId": "1025", # 上市ID                "ipoDate": "1996-11-26", # 上市挂牌日期                "ipoInfo": "正常",  # 上市挂牌状态                "ipoStockCode": "000639", # 证券代码                "marketName": "深圳证券交易所主板"  #交易所            }]        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppIpoInfo',                        'keys': ['ComName', 'ipoStockCode'],                        'check': 'ipoStockCode',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': 'ipoId',                            'En': 'ipoId',                            'v': 'ipoId',                            't': 'json'                        },                        {                            'n': '上市挂牌日期',                            'En': 'ipoDate',                            'v':                            'ipoDate',                            't': 'json'                        },                        {                            'n': '上市挂牌状态',                            'En': 'ipoInfo',                            'v':                            'ipoInfo',                            't': 'json'                        },                        {                            'n': '证券代码',                            'En': 'ipoStockCode',                            'v':                            'ipoStockCode',                            't': 'json'                        }, {                            'n': '深圳证券交易所主板',                            'En': 'marketName',                            'v':                            'marketName',                            't': 'json'                        },                 ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def ivtFundInfo(self, response):        # print(response.text)        '''        "result": [{                "fundId": "2814585749", # 基金ID                "fundName": "西王九派基金", # 基金名称                "orgId": "2802817451", # 管理机构ID                "orgName": "九派资本", # 管理机构名称                "fundType": "成长基金", # 基金类型                "raiseRound": "A", # 募集轮次                "currencyName": "人民币", # 募集币种                "fundSize": "10.00亿", # 目标规模                "investDate": "2016-07-13", # 出资时间                "promiseMoney": "1.58亿" # 承诺金额            }]        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppIvtFundInfo',                        'keys': ['ComName', 'fundName'],                        'check': 'fundName',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': 'fundId',                            'En': 'fundId',                            'v': 'fundId',                            't': 'json'                        },                        {                            'n': '基金名称',                            'En': 'fundName',                            'v':                            'fundName',                            't': 'json'                        },                        {                            'n': '管理机构ID',                            'En': 'orgId',                            'v':                            'orgId',                            't': 'json'                        },                        {                            'n': '管理机构名称',                            'En': 'orgName',                            'v':                            'orgName',                            't': 'json'                        }, {                            'n': '基金类型',                            'En': 'fundType',                            'v':                            'fundType',                            't': 'json'                        },{                            'n': '募集轮次',                            'En': 'raiseRound',                            'v':                            'raiseRound',                            't': 'json'                        },{                            'n': '募集币种',                            'En': 'currencyName',                            'v':                            'currencyName',                            't': 'json'                        },{                            'n': '目标规模',                            'En': 'fundSize',                            'v':                            'fundSize',                            't': 'json'                        },{                            'n': '出资时间',                            'En': 'investDate',                            'v':                            'investDate',                            't': 'json'                        },{                            'n': '承诺金额',                            'En': 'promiseMoney',                            'v':                            'promiseMoney',                            't': 'json'                        },                 ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def lastEpNeedInfo(self, response):        # print(response.text)        '''        "result": {                "epNeedId": "8240", #  融资ID                "roundName": "上市定增", # 融资轮次                "needType": "定向增发",  # 融资方式                "epNeedMoney": "5.94亿",  # 融资金额                "epNeedCurrency": "人民币",  # 融资币种                "epNeedStake": "",  # 所占股份                "descCn": "2012年12月20日，张家港化工机械股份有限公司拟向不超过十名特定投资者非公开发行6600万股(每股9元)，计划融资金额不超过RMB594.00M。"                # 融资描述            }        '''        if 'epNeedId' not in response.text:            return        _configs = [{                'list': {                        'n': '',                        'v': '',                        't': 'json',                        'db': 'Simutong.AppLastEpNeedInfo',                        'keys': ['ComName', 'epNeedId'],                        'check': 'epNeedId',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '融资ID',                            'En': 'epNeedId',                            'v': 'result/epNeedId',                            't': 'json'                        },                        {                            'n': '融资轮次',                            'En': 'roundName',                            'v':                            'result/roundName',                            't': 'json'                        },                        {                            'n': '融资方式',                            'En': 'needType',                            'v':                            'result/needType',                            't': 'json'                        },                        {                            'n': '融资金额',                            'En': 'epNeedMoney',                            'v':                            'result/epNeedMoney',                            't': 'json'                        }, {                            'n': '融资币种',                            'En': 'epNeedCurrency',                            'v':                            'result/epNeedCurrency',                            't': 'json'                        },{                            'n': '所占股份',                            'En': 'epNeedStake',                            'v':                            'result/epNeedStake',                            't': 'json'                        },{                            'n': '融资描述',                            'En': 'descCn',                            'v':                            'result/descCn',                            't': 'json'                        },                ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def caseInfo(self, response):        # print(response.text)        '''        "result": [{                "caseTime": "2014-01-03", # 案发日期                "caseType": "典型案件（公布案件）",  # 违法行为类型                "caseResult": "已处罚",  # 案件结果                "penAuth": "北京市工商行政管理局海淀分局",  # 做出行政处罚决定机关                "illegFact": "，违反了《中华人民共和国反不正当竞争法》第九条第一款的规定依据《中华人民共和国反不正当竞争法》第二十四条第一款的规定"                # 主要违法事实            },         '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppCaseInfo',                        'keys': ['ComName', 'caseTime','caseType'],                        'check': 'caseTime',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '案发日期',                            'En': 'caseTime',                            'v': 'caseTime',                            't': 'json'                        },                        {                            'n': '违法行为类型',                            'En': 'caseType',                            'v':                            'caseType',                            't': 'json'                        },                        {                            'n': '案件结果',                            'En': 'caseResult',                            'v':                            'caseResult',                            't': 'json'                        },                        {                            'n': '做出行政处罚决定机关',                            'En': 'penAuth',                            'v':                            'penAuth',                            't': 'json'                        }, {                            'n': '主要违法事实',                            'En': 'illegFact',                            'v':                            'illegFact',                            't': 'json'                        },                ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def punishBreakInfo(self, response):        # print(response.text)        '''        "result": [{            "punishBreakName": "新余星辉农产品批发市场开发有限公司", # 失信人名称            "caseCode": "(2016)赣05执4号",  # 案号            "regDateClean": "2016-01-21",  # 立案时间            "gistId": "(2015)余民三初字第4号民事判决书",  # 执行依据文号            "gistUnit": "新余市中级人民法院",  # 做出执行依据单位            "duty": "1、被告新余星辉农产品批发市场开发有限公司于本判决书生效后十日内赔偿原告经济损失共计人民币200000元；2、驳回原告其他诉讼请求；3、驳回被告的反诉请求；4、案件受理费49138.4元，反诉费1650元，由原告承担24569.2元，被告承担26219.2元。",            # 生效法律文件确定的义务            "performance": "失信记录已退出",  # 被执行人的旅行情况            "courtName": "江西省新余市中级人民法院"  # 执行法院        },        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppPunishBreakInfo',                        'keys': ['ComName', 'caseCode', 'punishBreakName'],                        'check': 'caseCode',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '失信人名称',                            'En': 'punishBreakName',                            'v': 'punishBreakName',                            't': 'json'                        },                        {                            'n': '案号',                            'En': 'caseCode',                            'v':                            'caseCode',                            't': 'json'                        },                        {                            'n': '立案时间',                            'En': 'regDateClean',                            'v':                            'regDateClean',                            't': 'json'                        },                        {                            'n': '执行依据文号',                            'En': 'gistId',                            'v':                            'gistId',                            't': 'json'                        }, {                            'n': '做出执行依据单位',                            'En': 'gistUnit',                            'v':                            'gistUnit',                            't': 'json'                        },{                            'n': '生效法律文件确定的义务',                            'En': 'duty',                            'v':                            'duty',                            't': 'json'                        },{                            'n': '被执行人的旅行情况',                            'En': 'performance',                            'v':                            'performance',                            't': 'json'                        },{                            'n': '执行法院',                            'En': 'courtName',                            'v':                            'courtName',                            't': 'json'                        },                ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def punishedInfo(self, response):        # print(response.text)        '''        "result": [{                "punishedName": "常州朗脉洁净技术有限公司", # 被执行人名称                "regDateClean": "2016-01-04",  # 立案日期                "courtName": "常州市武进区人民法院", # 执行法院                "execMoney": "559600.00元", # 执行标的                "caseStatus": "执行中" # 案件执行状态            }]        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppPunishedInfo',                        'keys': ['ComName', 'punishedName', 'regDateClean'],                        'check': 'punishedName',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '被执行人名称',                            'En': 'punishedName',                            'v': 'punishedName',                            't': 'json'                        },                        {                            'n': '立案日期',                            'En': 'regDateClean',                            'v':                            'regDateClean',                            't': 'json'                        },                        {                            'n': '执行法院',                            'En': 'courtName',                            'v':                            'courtName',                            't': 'json'                        },                        {                            'n': '执行标的',                            'En': 'execMoney',                            'v':                            'execMoney',                            't': 'json'                        }, {                            'n': '案件执行状态',                            'En': 'caseStatus',                            'v':                            'caseStatus',                            't': 'json'                        },                ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def pledgeInfo(self, response):        # print(response.text)        '''        "result": [{                "impOrg": "小米通讯技术有限公司", # 质权人姓名                "impOrgType": "非金融机构", # 出质人类别                "impAmt": "143934.05万",  # 出质金额                "impOnRecDate": "2016-04-20",  # 出质备案日期                "impExaeep": "北京市工商局",  # 出质审批部门                "impSanDate": "2016-04-20",  # 出质批准日期                "impTo": ""  # 出质截至日期            },         '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppPledgeInfo',                        'keys': ['ComName', 'impOrg', 'impOnRecDate'],                        'check': 'impOrg',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '质权人姓名',                            'En': 'impOrg',                            'v': 'impOrg',                            't': 'json'                        },                        {                            'n': '出质人类别',                            'En': 'impOrgType',                            'v':                            'impOrgType',                            't': 'json'                        },                        {                            'n': '出质金额',                            'En': 'impAmt',                            'v':                            'impAmt',                            't': 'json'                        },                        {                            'n': '出质备案日期',                            'En': 'impOnRecDate',                            'v':                            'impOnRecDate',                            't': 'json'                        }, {                            'n': '出质审批部门',                            'En': 'impExaeep',                            'v':                            'impExaeep',                            't': 'json'                        }, {                            'n': '出质批准日期',                            'En': 'impSanDate',                            'v':                            'impSanDate',                            't': 'json'                        }, {                            'n': '出质截至日期',                            'En': 'impTo',                            'v':                            'impTo',                            't': 'json'                        },                 ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def abnormalInfo(self, response):        # print(response.text)        pass    def project_list(self, response):        # print(response.text)        '''        "result": [{                "project": "65244", #                  "qkid": "12730544",                "logo": "https://pic.pedata.cn//pedata-app/logo/project/201802/e8cf4509f053418999a163881b7f8d7f.png",                "title": "小米科技/小米手机",                "companyName": "小米科技有限责任公司",                "established": "2010.4",                "round": "E轮",                "desc": "专注于高端智能手机、互联网电视以及智能家居生态链建设",                "epNeedInfo": ""            }],        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppProjectList',                        'keys': ['ComName', 'companyName'],                        'check': 'companyName',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '项目ID',                            'En': 'project',                            'v': 'project',                            't': 'json'                        },                        {                            'n': '清科ID',                            'En': 'qkid',                            'v':                            'qkid',                            't': 'json'                        },{                            'n': 'title',                            'En': 'title',                            'v':                            'title',                            't': 'json'                        },                        {                            'n': '公司名称',                            'En': 'companyName',                            'v':                            'companyName',                            't': 'json'                        },                        {                            'n': '成立日期',                            'En': 'established',                            'v':                            'established',                            't': 'json'                        }, {                            'n': '轮次',                            'En': 'round',                            'v':                            'round',                            't': 'json'                        }, {                            'n': '描述',                            'En': 'descinfo',                            'v':                            'desc',                            't': 'json'                        }, {                            'n': '融资信息',                            'En': 'epNeedInfo',                            'v':                            'epNeedInfo',                            't': 'json'                        },                 ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def rankInfo(self, response):        # print(response.text)        '''        "result": [{                "rankId": "303", # id                "rankNameCn": "2017年中国私募股权投资机构100强", # 榜单名称                "publisherCn": "清科集团", # 发布机构                "publisherDate": "2017-12-08", # 发布日期                "listPlace": "" # # 获得排名            },        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppRankInfo',                        'keys': ['ComName', 'rankNameCn'],                        'check': 'rankNameCn',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': 'rankId',                            'En': 'rankId',                            'v': 'rankId',                            't': 'json'                        },                        {                            'n': '榜单名称',                            'En': 'rankNameCn',                            'v':                            'rankNameCn',                            't': 'json'                        },                        {                            'n': '发布机构',                            'En': 'publisherCn',                            'v':                            'publisherCn',                            't': 'json'                        },                        {                            'n': '发布日期',                            'En': 'publisherDate',                            'v':                            'publisherDate',                            't': 'json'                        }, {                            'n': '获得排名',                            'En': 'listPlace',                            'v':                            'listPlace',                            't': 'json'                        },                 ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def epRelation(self, response):        # print(response.text)        '''        "result": [{                "qkid": "2770666651", # id                "namecn": "北京金影科技有限公司", # 企业名称                "snamecn": "火星小说",  # 企业简称                "establish": "2014-07-24",  # 创立时间                "headName": "海淀区", # 总部地区                "indName": "无线互联网服务", # 行业                "entStatus": "在营（开业）", # 企业状态                "companyStatus": "开业", # 公司状态                "logo": "https://pic.pedata.cn//Attachment/Logo/c/201602/134427CB-D1A8-4152-B040-602031E2FB7F.png", # 企业logo                "tags": null # 标签            },        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppEpRelation',                        'keys': ['ComName', 'namecn'],                        'check': 'namecn',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': 'qkid',                            'En': 'qkid',                            'v': 'qkid',                            't': 'json'                        },                        {                            'n': '企业名称',                            'En': 'namecn',                            'v':                            'namecn',                            't': 'json'                        },                        {                            'n': '企业简称',                            'En': 'snamecn',                            'v':                            'snamecn',                            't': 'json'                        },                        {                            'n': '创立时间',                            'En': 'establish',                            'v':                            'establish',                            't': 'json'                        }, {                            'n': '总部地区',                            'En': 'headName',                            'v':                            'headName',                            't': 'json'                        }, {                            'n': '行业',                            'En': 'indName',                            'v':                            'indName',                            't': 'json'                        }, {                            'n': '企业状态',                            'En': 'entStatus',                            'v':                            'entStatus',                            't': 'json'                        }, {                            'n': '公司状态',                            'En': 'companyStatus',                            'v':                            'companyStatus',                            't': 'json'                        }, {                            'n': ' 企业logo',                            'En': 'logo',                            'v':                            'logo',                            't': 'json'                        }, {                            'n': '标签',                            'En': 'tags',                            'v':                            'tags',                            't': 'json_join,'                        },                 ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def partnerRelation(self, response):        # print(response.text)        '''        "result": {            "shId": "12730544",            "shName": "小米科技有限责任公司", # 企业名称            "subConAmt": "",            "fundedRatio": "",            "children": [{                "shId": "", # 股东ID                "shName": "雷军", # 股东名称                "subConAmt": "143934.05万人民币", # 出资                "fundedRatio": "77.80%" # 比例            }, {                "shId": "",                "shName": "黎万强",                "subConAmt": "18724.36万人民币",                "fundedRatio": "10.12%"            }, {                "shId": "2822952152",                "shName": "洪锋",                "subConAmt": "18623.10万人民币",                "fundedRatio": "10.07%"            }, {                "shId": "2822952354",                "shName": "刘德",                "subConAmt": "3718.50万人民币",                "fundedRatio": "2.01%"            }]        '''        if '[]'  in response.text:            return        _configs = [{                'list': {                        'n': '',                        'v': 'result/children',                        't': 'json',                        'db': 'Simutong.AppPartnerRelation',                        'keys': ['ComName', 'shName'],                        'check': 'shName',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '股东ID',                            'En': 'shId',                            'v': 'shId',                            't': 'json'                        },                        {                            'n': '股东名称',                            'En': 'shName',                            'v':                            'shName',                            't': 'json'                        },                        {                            'n': '出资',                            'En': 'subConAmt',                            'v':                            'subConAmt',                            't': 'json'                        },                        {                            'n': '比例',                            'En': 'fundedRatio',                            'v':                            'fundedRatio',                            't': 'json'                        },                 ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def manageFundInfo(self, response):        # print(response.text)        '''        "result": [{                "fundId": "2810021461", # 基金ID                "fundNameCn": "襄阳博润股权投资基金管理中心（有限合伙）", # 基金名称                "fundType": "成长基金",  # 基金类型                "raiseStatus": "首期募完，正在募集", # 募集状态                "raiseMoney": "1.00亿", # 募集金额                "currency": "人民币", # 募集币种                "raiseEnd": "2012-09-28", # 募集完成时间                "investCount": "2起", # 投资案例                "exitCount": "2起", # 退出案例                "avgTtMult": "2.06倍", # 回报倍数                "avgIrr": "68.95%" # 平均IRR            },         '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppManageFundInfo',                        'keys': ['ComName', 'fundNameCn'],                        'check': 'fundNameCn',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '基金ID',                            'En': 'fundId',                            'v': 'fundId',                            't': 'json'                        },                        {                            'n': '基金名称',                            'En': 'fundNameCn',                            'v':                            'fundNameCn',                            't': 'json'                        },                        {                            'n': '基金类型',                            'En': 'fundType',                            'v':                            'fundType',                            't': 'json'                        },                        {                            'n': '募集状态',                            'En': 'raiseStatus',                            'v':                            'raiseStatus',                            't': 'json'                        }, {                            'n': '募集金额',                            'En': 'raiseMoney',                            'v':                            'raiseMoney',                            't': 'json'                        }, {                            'n': '募集币种',                            'En': 'currency',                            'v':                            'currency',                            't': 'json'                        }, {                            'n': '募集完成时间',                            'En': 'raiseEnd',                            'v':                            'raiseEnd',                            't': 'json'                        }, {                            'n': '投资案例',                            'En': 'investCount',                            'v':                            'investCount',                            't': 'json'                        }, {                            'n': '退出案例',                            'En': 'exitCount',                            'v':                            'exitCount',                            't': 'json'                        }, {                            'n': '回报倍数',                            'En': 'avgTtMult',                            'v':                            'avgTtMult',                            't': 'json'                        }, {                            'n': '平均IRR',                            'En': 'avgIrr',                            'v':                            'avgIrr',                            't': 'json'                        },                 ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    def fundRaiseInfo(self, response):        # print(response.text)        '''        "result": [{                "raiseDate": "2018-01-12", # 募集时间                "raiseMoney": "",  # 募集金额                "raiseCurrency": "人民币", # 募集币种                "roundName": "A", # 募集轮次                "lpList": [] # LP 名称            }        "result": [{                "raiseDate": "2017-12-29",                "raiseMoney": "24.00亿",                "raiseCurrency": "人民币",                "roundName": "A",                "lpList": [{                    "lpId": "2118048962", # LP id                    "lpName": "中国民生银行股份有限公司天津分行" # LP名称                }, {                    "lpId": "262023915",                    "lpName": "猛狮科技"                }]            }]        '''        _configs = [{                'list': {                        'n': '',                        'v': 'result',                        't': 'json',                        'db': 'Simutong.AppFundRaiseInfo',                        'keys': ['ComName', 'raiseDate'],                        'check': 'raiseDate',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': '公司名称',                            'En': 'ComName',                            'v': 'namecn',                            't': 'meta'                        },                         {                            'n': '募集时间',                            'En': 'raiseDate',                            'v': 'raiseDate',                            't': 'json'                        },                        {                            'n': '募集金额',                            'En': 'raiseMoney',                            'v':                            'raiseMoney',                            't': 'json'                        },                        {                            'n': '募集币种',                            'En': 'raiseCurrency',                            'v':                            'raiseCurrency',                            't': 'json'                        },                        {                            'n': '募集轮次',                            'En': 'roundName',                            'v':                            'roundName',                            't': 'json'                        }, {                            'n': 'Lpnames',                            'En': 'Lpnames',                            'v':                            'lpList/lpName',                            't': 'json'                        },                 ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)    # 回归起点    def surveyinfo(self, response):        # 该页面有请求限制 单账号只能查看200个        # print(response.text)        JS = json.loads(response.text)        qkids = jsonpath(JS,'$..qkid')                if qkids:            for qkid in qkids:                if not qkid:                    continue                yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/surveyInfo?qkid={qkid}'.format(qkid=qkid),                    headers=self.headers,                    meta={'cookiejar': response.meta['cookiejar']},                    callback=self.surveyinfo)        try:            qkid = jsonpath(JS,'$.result.qkid')[0]        except:            return        _configs = [{                'list': {                        'n': '',                        'v': '',                        't': 'json',                        'db': 'Simutong.AppEntBaseInfo',                        'keys': ['namecn'],                        'check': 'namecn',                        'conn': conn_flag                        },                'response_type':                    'json',                    'data': [                        {                            'n': 'qkid',                            'En': 'qkid',                            'v': 'result/qkid',                            't': 'json'                        },                         {                            'n': 'snamecn',                            'En': 'snamecn',                            'v': 'result/snamecn',                            't': 'json'                        },                        {                            'n': 'namecn',                            'En': 'namecn',                            'v':                            'result/namecn',                            't': 'json'                        },                        {                            'n': 'establish',                            'En': 'establish',                            'v':                            'result/establish',                            't': 'json'                        },                        {                            'n': 'headName',                            'En': 'headName',                            'v':                            'result/headName',                            't': 'json'                        },{                            'n': 'indName',                            'En': 'indName',                            'v':                            'result/indName',                            't': 'json'                        },{                            'n': 'entStatus',                            'En': 'entStatus',                            'v':                            'result/entStatus',                            't': 'json'                        },{                            'n': 'companyStatus',                            'En': 'companyStatus',                            'v':                            'result/companyStatus',                            't': 'json'                        },{                            'n': 'tags',                            'En': 'tags',                            'v':                            'result/tags',                            't': 'json_join,'                        },{                            'n': 'descCn',                            'En': 'descCn',                            'v':                            'result/descCn',                            't': 'json'                        },{                            'n': 'logo',                            'En': 'logo',                            'v':                            'result/logo',                            't': 'json'                        },{                            'n': 'orgId',                            'En': 'orgId',                            'v':                            'result/orgId',                            't': 'json'                        },                ]            }]        results = self.item_parse(_configs, response)        for item in results:            yield item            # print(item)        namecn = JS['result']['namecn']        # print(qkid,namecn)        if JS['result']['hasBaseInfo']:            # baseinfo            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/baseInfo?qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.baseInfo)            # 联系信息            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/contactInfo?qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.contactInfo)            # 主要人员            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/personInfo?start=0&limit=2&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.personInfo)        if JS['result']['hasRegInfo']:            # 工商基本信息            # 注册信息            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/regInfo?qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.regInfo)            # 变更记录            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/changeInfo?start=0&limit=10&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.changeInfo)            # 对外投资            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/entInvestInfo?start=0&limit=2&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.entInvestInfo)            # 股东信息            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/partnerInfo?start=0&limit=2&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.partnerInfo)        if JS['result']['hasRaiseInfo']:            # 融资投资            # 股权融资            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/equityInfo?start=0&limit=2&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.equityInfo)            # 对外收购            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/entMaInfo?start=0&limit=2&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.entMaInfo)            # 退出项目            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/exitProjectInfo?start=0&limit=2&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.exitProjectInfo)            # 投资项目            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/projectInfo?start=0&limit=2&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.projectInfo)            # 上市挂牌            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/ipoInfo?start=0&limit=2&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.ipoInfo)            # 投资基金            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/ivtFundInfo?start=0&limit=2&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.ivtFundInfo)            # 融资需求            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/lastEpNeedInfo?qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.lastEpNeedInfo)                if JS['result']['hasLawInfo']:            # 法律诉讼            # 案件情况            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/caseInfo?start=0&limit=1&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.caseInfo)            # 失信情况            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/punishBreakInfo?start=0&limit=1&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.punishBreakInfo)            # 被执行人情况            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/punishedInfo?start=0&limit=2&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.punishedInfo)        if JS['result']['hasFundInfo']:            # 基金管理            # 管理基金            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/manageFundInfo?start=0&limit=2&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.manageFundInfo)                        # 基金募集            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/fundRaiseInfo?start=0&limit=2&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.fundRaiseInfo)        if JS['result']['hasAnalyseInfo']:            # 经营分析            # 股权出质            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/pledgeInfo?start=0&limit=2&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.pledgeInfo)            #             yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/abnormalInfo?start=0&limit=2&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.abnormalInfo)        if JS['result']['hasProductInfo']:            # 项目产品            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/project/list?start=0&limit=10&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.project_list)        if JS['result']['hasListInfo']:            # 板单新闻            # 榜单新闻            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/rankInfo?start=0&limit=10&qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.rankInfo)        if JS['result']['hasEpRelation']:            # 相关企业            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/epRelation?qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.epRelation)        if JS['result']['hasPartner']:            # 股权结构            yield scrapy.Request('https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/partnerRelation?qkid={qkid}'.format(qkid=qkid),                headers=self.headers,                meta={'cookiejar': response.meta['cookiejar'],'qkid':qkid, 'namecn': namecn},                callback=self.partnerRelation)    def login_in(self):        '''登入私募通App 获取cookie并全局        '''        url = 'https://app.pedata.cn/PEDATA_APP_BACK/user/login?platform=ios&app_name=smt_app&platversion=4.0.9&device_info=iPhone10.3&device_version=iPhone6s&ios_idfa=96A97A1F-DADA-4585-B76A-E680C76C1B16'        post_data = {'password': '8927968', 'username': '17600811823'}        headers={'User-Agent': 'AppDelegate/3.10.10 (iPhone; iOS 10.3; Scale/2.00)','Referer':None}        res = requests.post(url,post_data,headers=headers)        self.user_info = json.loads(res.text)        self.cookies = res.cookies.get_dict()        print(res.text)        q = requests.post('https://app.pedata.cn/PEDATA_APP_BACK/project/list?platform=ios&app_name=smt_app&platversion=4.0.9&device_info=iPhone10.3&device_version=iPhone6s&ios_idfa=96A97A1F-DADA-4585-B76A-E680C76C1B16',             {'limit':'100','start':'0'},cookies=self.cookies).text        print(q)        # self.headers_in = self.headers        # self.headers_in['Cookies'] = if __name__ == '__main__':    '''        'https://app.pedata.cn/PEDATA_APP_BACK/project/detail?projectId={project}' # 项目基础信息  has        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/history?qkid={qkid}'  # 投资事件        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/surveyInfo?qkid={qkid}'  # 公司信息  企业信息栏目总页  获取有哪些分内容        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/baseInfo?qkid={qkid}' # 基本信息   hasBaseInfo        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/contactInfo?qkid={qkid}' # 联系方式        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/personInfo?start=0&limit=2&qkid={qkid}' # 主要人员        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/regInfo?qkid={qkid}' # 工商信息        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/changeInfo?start=0&limit=1&qkid={qkid}' # 变更记录        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/entInvestInfo?start=0&limit=2&qkid={qkid}' # 对外投资        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/partnerInfo?start=0&limit=2&qkid={qkid}' # 股东信息        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/equityInfo?start=0&limit=2&qkid={qkid}' # 融资信息   可能分页        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/exitProjectInfo?start=0&limit=2&qkid={qkid}' # 退出项目        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/projectInfo?start=0&limit=2&qkid={qkid}' # 投资项目        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/entMaInfo?start=0&limit=2&qkid={qkid}' # 对外收购        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/ipoInfo?start=0&limit=2&qkid={qkid}' # 上市挂牌        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/ivtFundInfo?start=0&limit=2&qkid={qkid}' # 投资资金        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/lastEpNeedInfo?qkid={qkid}' # 融资需求        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/manageFundInfo?start=0&limit=2&qkid={qkid}' # 基金管理  可能分页        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/fundRaiseInfo?start=0&limit=2&qkid={qkid}' # 基金募集        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/subOrgInfo?start=0&limit=2&qkid={qkid}' # 下级机构        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/projectInfo?start=0&limit=2&qkid={qkid}' # 投资项目        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/exitProjectInfo?start=0&limit=2&qkid={qkid}' # 退出项目        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/entMaInfo?start=0&limit=2&qkid={qkid}'        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/ipoInfo?start=0&limit=2&qkid={qkid}'        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/equityInfo?start=0&limit=2&qkid={qkid}'        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/ivtFundInfo?start=0&limit=2&qkid={qkid}'        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/rankInfo?start=0&limit=10&qkid={qkid}' # 板单信息        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/newsInfo?start=0&limit=10&key={key}' #相关新闻 namecn        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/rankInfo?start=0&limit=10&qkid={qkid}' #榜单新闻 namecn         'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/epRelation?qkid={qkid}' # 相关企业        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/partnerRelation?qkid={qkid}' # 股权结构        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/pledgeInfo?start=0&limit=2&qkid={qkid}' # 股权出质          'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/abnormalInfo?start=0&limit=2&qkid={qkid}' #         'https://app.pedata.cn/PEDATA_APP_BACK/project/list?start=0&limit=10&qkid={qkid}' # 项目产品  可能分页        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/caseInfo?start=0&limit=1&qkid={qkid}' # 法律诉讼信息  案件情况        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/punishBreakInfo?start=0&limit=1&qkid={qkid}' # 失信情况        'https://app.pedata.cn/PEDATA_APP_BACK/orgBasic/punishedInfo?start=0&limit=2&qkid={qkid}' #被执行人情况        '''